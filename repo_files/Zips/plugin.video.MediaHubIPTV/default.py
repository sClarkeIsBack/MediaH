exec("import re;import base64");exec(base64.b64decode(''));exec(base64.b64decode('DQpjbGFzcyBUcmFpbGVyOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmKToNCiAgICAgICAgc2VsZi5iYXNlX2xpbmsgPSAnaHR0cDovL3d3dy55b3V0dWJlLmNvbScNCiAgICAgICAgc2VsZi5rZXlfbGluayA9ICdRVWw2WVZONVFuWkVTM0puU1UxTlZtUlBhalpTYjFwblVXaGFTelJITTNNeWJEWlhlVmhuJw0KICAgICAgICBzZWxmLmtleV9saW5rID0gJyZrZXk9JXMnICUgYmFzZTY0LnVybHNhZmVfYjY0ZGVjb2RlKHNlbGYua2V5X2xpbmspDQogICAgICAgIHNlbGYuc2VhcmNoX2xpbmsgPSAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20veW91dHViZS92My9zZWFyY2g/cGFydD1zbmlwcGV0JnR5cGU9dmlkZW8mbWF4UmVzdWx0cz01JnE9JXMnDQogICAgICAgIHNlbGYueW91dHViZV9zZWFyY2ggPSAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20veW91dHViZS92My9zZWFyY2g/cT0nDQogICAgICAgIHNlbGYueW91dHViZV93YXRjaCA9ICdodHRwOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9JXMnDQoNCiAgICBkZWYgcGxheShzZWxmLCBuYW1lLCB1cmw9Tm9uZSk6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHVybCA9IHNlbGYud29ya2VyKG5hbWUsIHVybCkNCiAgICAgICAgICAgIGlmIHVybCA9PSBOb25lOiByZXR1cm4NCg0KICAgICAgICAgICAgdGl0bGUgPSBjb250cm9sLmluZm9MYWJlbCgnbGlzdGl0ZW0udGl0bGUnKQ0KICAgICAgICAgICAgaWYgdGl0bGUgPT0gJyc6IHRpdGxlID0gY29udHJvbC5pbmZvTGFiZWwoJ2xpc3RpdGVtLmxhYmVsJykNCiAgICAgICAgICAgIGljb24gPSBjb250cm9sLmluZm9MYWJlbCgnbGlzdGl0ZW0uaWNvbicpDQoNCiAgICAgICAgICAgIGl0ZW0gPSBjb250cm9sLml0ZW0ocGF0aD11cmwsIGljb25JbWFnZT1pY29uLCB0aHVtYm5haWxJbWFnZT1pY29uKQ0KICAgICAgICAgICAgdHJ5OiBpdGVtLnNldEFydCh7J2ljb24nOiBpY29ufSkNCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcw0KICAgICAgICAgICAgaXRlbS5zZXRJbmZvKHR5cGU9J1ZpZGVvJywgaW5mb0xhYmVscyA9IHsndGl0bGUnOiB0aXRsZX0pDQogICAgICAgICAgICBjb250cm9sLnBsYXllci5wbGF5KHVybCwgaXRlbSkNCiAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgcGFzcw0KDQogICAgZGVmIHdvcmtlcihzZWxmLCBuYW1lLCB1cmwpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBpZiB1cmwuc3RhcnRzd2l0aChzZWxmLmJhc2VfbGluayk6DQogICAgICAgICAgICAgICAgdXJsID0gc2VsZi5yZXNvbHZlKHVybCkNCiAgICAgICAgICAgICAgICBpZiB1cmwgPT0gTm9uZTogcmFpc2UgRXhjZXB0aW9uKCkNCiAgICAgICAgICAgICAgICByZXR1cm4gdXJsDQogICAgICAgICAgICBlbGlmIG5vdCB1cmwuc3RhcnRzd2l0aCgnaHR0cDovLycpOg0KICAgICAgICAgICAgICAgIHVybCA9IHNlbGYueW91dHViZV93YXRjaCAlIHVybA0KICAgICAgICAgICAgICAgIHVybCA9IHNlbGYucmVzb2x2ZSh1cmwpDQogICAgICAgICAgICAgICAgaWYgdXJsID09IE5vbmU6IHJhaXNlIEV4Y2VwdGlvbigpDQogICAgICAgICAgICAgICAgcmV0dXJuIHVybA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oKQ0KICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICBxdWVyeSA9IG5hbWUgKyAnIHRyYWlsZXInDQogICAgICAgICAgICBxdWVyeSA9IHNlbGYueW91dHViZV9zZWFyY2ggKyBxdWVyeQ0KICAgICAgICAgICAgdXJsID0gc2VsZi5zZWFyY2gocXVlcnkpDQogICAgICAgICAgICBpZiB1cmwgPT0gTm9uZTogcmV0dXJuDQogICAgICAgICAgICByZXR1cm4gdXJsDQoNCg0KICAgIGRlZiBzZWFyY2goc2VsZiwgdXJsKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcXVlcnkgPSB1cmxwYXJzZS5wYXJzZV9xcyh1cmxwYXJzZS51cmxwYXJzZSh1cmwpLnF1ZXJ5KVsncSddWzBdDQoNCiAgICAgICAgICAgIHVybCA9IHNlbGYuc2VhcmNoX2xpbmsgJSB1cmxsaWIucXVvdGVfcGx1cyhxdWVyeSkgKyBzZWxmLmtleV9saW5rDQoNCiAgICAgICAgICAgIHJlc3VsdCA9IGNsaWVudC5yZXF1ZXN0KHVybCkNCg0KICAgICAgICAgICAgaXRlbXMgPSBqc29uLmxvYWRzKHJlc3VsdClbJ2l0ZW1zJ10NCiAgICAgICAgICAgIGl0ZW1zID0gWyhpWydpZCddWyd2aWRlb0lkJ10pIGZvciBpIGluIGl0ZW1zXQ0KDQogICAgICAgICAgICBmb3IgdXJsIGluIGl0ZW1zOg0KICAgICAgICAgICAgICAgIHVybCA9IHNlbGYucmVzb2x2ZSh1cmwpDQogICAgICAgICAgICAgICAgaWYgbm90IHVybCBpcyBOb25lOiByZXR1cm4gdXJsDQogICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgIHJldHVybg0KDQoNCiAgICBkZWYgcmVzb2x2ZShzZWxmLCB1cmwpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBpZCA9IHVybC5zcGxpdCgnP3Y9JylbLTFdLnNwbGl0KCcvJylbLTFdLnNwbGl0KCc/JylbMF0uc3BsaXQoJyYnKVswXQ0KICAgICAgICAgICAgcmVzdWx0ID0gY2xpZW50LnJlcXVlc3QoJ2h0dHA6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0lcycgJSBpZCkNCg0KICAgICAgICAgICAgbWVzc2FnZSA9IGNsaWVudC5wYXJzZURPTShyZXN1bHQsICdkaXYnLCBhdHRycyA9IHsnaWQnOiAndW5hdmFpbGFibGUtc3VibWVzc2FnZSd9KQ0KICAgICAgICAgICAgbWVzc2FnZSA9ICcnLmpvaW4obWVzc2FnZSkNCg0KICAgICAgICAgICAgYWxlcnQgPSBjbGllbnQucGFyc2VET00ocmVzdWx0LCAnZGl2JywgYXR0cnMgPSB7J2lkJzogJ3dhdGNoNy1ub3RpZmljYXRpb24tYXJlYSd9KQ0KDQogICAgICAgICAgICBpZiBsZW4oYWxlcnQpID4gMDogcmFpc2UgRXhjZXB0aW9uKCkNCiAgICAgICAgICAgIGlmIHJlLnNlYXJjaCgnW2EtekEtWl0nLCBtZXNzYWdlKTogcmFpc2UgRXhjZXB0aW9uKCkNCg0KICAgICAgICAgICAgdXJsID0gJ3BsdWdpbjovL3BsdWdpbi52aWRlby55b3V0dWJlL3BsYXkvP3ZpZGVvX2lkPSVzJyAlIGlkDQogICAgICAgICAgICByZXR1cm4gdXJsDQogICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgIHJldHVybg0KCQkJDQpkZWYgdHJhaWxlcih1cmwpOg0KCXhibWMuZXhlY3V0ZWJ1aWx0aW4oJ0FjdGl2YXRlV2luZG93KGJ1c3lkaWFsb2cpJykNCglUcmFpbGVyKCkucGxheSh1cmwpIA0KCXhibWMuZXhlY3V0ZWJ1aWx0aW4oJ0RpYWxvZy5DbG9zZShidXN5ZGlhbG9nKScpDQoJDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQoNCmRlZiBnZXRfcGFyYW1zKCk6DQoJcGFyYW09W10NCglwYXJhbXN0cmluZz1zeXMuYXJndlsyXQ0KCWlmIGxlbihwYXJhbXN0cmluZyk+PTI6DQoJCXBhcmFtcz1zeXMuYXJndlsyXQ0KCQljbGVhbmVkcGFyYW1zPXBhcmFtcy5yZXBsYWNlKCc/JywnJykNCgkJaWYgKHBhcmFtc1tsZW4ocGFyYW1zKS0xXT09Jy8nKToNCgkJCXBhcmFtcz1wYXJhbXNbMDpsZW4ocGFyYW1zKS0yXQ0KCQlwYWlyc29mcGFyYW1zPWNsZWFuZWRwYXJhbXMuc3BsaXQoJyYnKQ0KCQlwYXJhbT17fQ0KCQlmb3IgaSBpbiByYW5nZShsZW4ocGFpcnNvZnBhcmFtcykpOg0KCQkJc3BsaXRwYXJhbXM9e30NCgkJCXNwbGl0cGFyYW1zPXBhaXJzb2ZwYXJhbXNbaV0uc3BsaXQoJz0nKQ0KCQkJaWYgKGxlbihzcGxpdHBhcmFtcykpPT0yOg0KCQkJCXBhcmFtW3NwbGl0cGFyYW1zWzBdXT1zcGxpdHBhcmFtc1sxXQ0KCXJldHVybiBwYXJhbQ0KDQpwYXJhbXM9Z2V0X3BhcmFtcygpDQp1cmw9Tm9uZQ0KbmFtZT1Ob25lDQptb2RlPU5vbmUNCmljb25pbWFnZT1Ob25lDQpkZXNjcmlwdGlvbj1Ob25lDQpxdWVyeT1Ob25lDQp0eXBlPU5vbmUNCg0KdHJ5Og0KCXVybD11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sidXJsIl0pDQpleGNlcHQ6DQoJcGFzcw0KdHJ5Og0KCW5hbWU9dXJsbGliLnVucXVvdGVfcGx1cyhwYXJhbXNbIm5hbWUiXSkNCmV4Y2VwdDoNCglwYXNzDQp0cnk6DQoJaWNvbmltYWdlPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJpY29uaW1hZ2UiXSkNCmV4Y2VwdDoNCglwYXNzDQp0cnk6DQoJbW9kZT1pbnQocGFyYW1zWyJtb2RlIl0pDQpleGNlcHQ6DQoJcGFzcw0KdHJ5Og0KCWRlc2NyaXB0aW9uPXVybGxpYi51bnF1b3RlX3BsdXMocGFyYW1zWyJkZXNjcmlwdGlvbiJdKQ0KZXhjZXB0Og0KCXBhc3MNCnRyeToNCglxdWVyeT11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sicXVlcnkiXSkNCmV4Y2VwdDoNCglwYXNzDQp0cnk6DQoJdHlwZT11cmxsaWIudW5xdW90ZV9wbHVzKHBhcmFtc1sidHlwZSJdKQ0KZXhjZXB0Og0KCXBhc3MNCg0KaWYgbW9kZT09Tm9uZSBvciB1cmw9PU5vbmUgb3IgbGVuKHVybCk8MToNCglzdGFydCgpDQoNCmVsaWYgbW9kZT09MToNCglsaXZlY2F0ZWdvcnkodXJsKQ0KCQ0KZWxpZiBtb2RlPT0yOg0KCUxpdmVsaXN0KHVybCkNCgkNCmVsaWYgbW9kZT09MzoNCgl2b2QodXJsKQ0KCQ0KZWxpZiBtb2RlPT00Og0KCXN0cmVhbV92aWRlbyh1cmwpDQoJDQplbGlmIG1vZGU9PTU6DQoJc2VhcmNoKCkNCgkNCmVsaWYgbW9kZT09NjoNCglhY2NvdW50aW5mbygpDQoJDQplbGlmIG1vZGU9PTc6DQoJdHZndWlkZSgpDQoJDQplbGlmIG1vZGU9PTg6DQoJdHJhaWxlcih1cmwpDQoNCg0KeGJtY3BsdWdpbi5lbmRPZkRpcmVjdG9yeShpbnQoc3lzLmFyZ3ZbMV0pKQ=='))